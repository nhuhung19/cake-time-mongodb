const AppError = require("../utils/appError")


module.exports = function (err, req, res, next) {
  err.status = err.status || "error" // either fail or error
  err.statusCode = err.statusCode || "500" // either 4xx or 500
  // console.log(process.env.NODE_ENV)

  let error = { ...err }
  error.message = err.message;

  // invalid field format (mongodb)
  if (error.name === "CastError")
      error = handleCastErrorDB(error);

  // duplicate error (generated by mongodb driver: mongoose)
  if (error.code === 11000)
      error = handleDuplicateErrorDB(error);

  // mongoose validation error
  if (error.name === "ValidationError")
      error = handleValidationErrorDB(error)

  if (process.env.NODE_ENV === "development") {
      return res
          .status(error.statusCode)
          .json({
              status: error.status,
              message: error.message,
              error: error,
              stack: error.stack
          })
  } else if (process.env.NODE_ENV === " production") {
    return res
    .status(error.statusCode)
    .json({
      status: error.status,
      message: error.message
    })
  }
  // don't directly modify the err object.

  // errorProduction(error, res);
}
const handleCastErrorDB = err => {
  const message = `Invalid ${err.path}: ${err.value}`;
  return new AppError(400, message);
};
const handleDuplicateErrorDB = err => {
  const value = err.errmsg.match(/(["'])(?:(?=(\\?))\2.)*?\1/);
  const message = `Duplicate field value: ${value[0]}, please try again with different value`;
  return new AppError(400, message);
};

const handleValidationErrorDB = err => {
  const errors = Object.values(err.errors).map(el => el.message);
  const message = `Invalid input data. ${errors.join(". ")}`
  return new AppError(400, message);
};

// for development I want return error stack
// production: return error message

